(function() {
  var ShowTodo, TodoRegex;

  TodoRegex = require('../lib/todo-regex');

  ShowTodo = require('../lib/show-todo');

  describe('Todo Regex', function() {
    var defaultRegexStr, defaultTodoList, ref;
    ref = [], defaultRegexStr = ref[0], defaultTodoList = ref[1];
    beforeEach(function() {
      defaultRegexStr = ShowTodo.config.findUsingRegex["default"];
      return defaultTodoList = ShowTodo.config.findTheseTodos["default"];
    });
    return describe('create regexp', function() {
      it('includes a regular expression', function() {
        var todoRegex;
        todoRegex = new TodoRegex(defaultRegexStr, defaultTodoList);
        expect(typeof todoRegex.regexp.test).toBe('function');
        expect(typeof todoRegex.regexp.exec).toBe('function');
        expect(todoRegex.regex).toBe(defaultRegexStr);
        return expect(todoRegex.error).toBe(false);
      });
      it('sets error on invalid input', function() {
        var todoRegex;
        todoRegex = new TodoRegex('arstastTODO:.+$)/g', defaultTodoList);
        expect(todoRegex.error).toBe(true);
        todoRegex = new TodoRegex(defaultRegexStr, 'a string');
        expect(todoRegex.error).toBe(true);
        todoRegex = new TodoRegex(defaultRegexStr, []);
        return expect(todoRegex.error).toBe(true);
      });
      return it('handles empty input', function() {
        var todoRegex;
        todoRegex = new TodoRegex();
        expect(todoRegex.error).toBe(true);
        todoRegex = new TodoRegex('', defaultTodoList);
        return expect(todoRegex.error).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZGRld2V5Ly5hdG9tL3BhY2thZ2VzL3RvZG8tc2hvdy9zcGVjL3RvZG8tcmVnZXgtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLFNBQUEsR0FBWSxPQUFBLENBQVEsbUJBQVI7O0VBQ1osUUFBQSxHQUFXLE9BQUEsQ0FBUSxrQkFBUjs7RUFFWCxRQUFBLENBQVMsWUFBVCxFQUF1QixTQUFBO0FBQ3JCLFFBQUE7SUFBQSxNQUFxQyxFQUFyQyxFQUFDLHdCQUFELEVBQWtCO0lBRWxCLFVBQUEsQ0FBVyxTQUFBO01BQ1QsZUFBQSxHQUFrQixRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBQyxPQUFEO2FBQ2hELGVBQUEsR0FBa0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUMsT0FBRDtJQUZ2QyxDQUFYO1dBSUEsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQTtNQUN4QixFQUFBLENBQUcsK0JBQUgsRUFBb0MsU0FBQTtBQUNsQyxZQUFBO1FBQUEsU0FBQSxHQUFnQixJQUFBLFNBQUEsQ0FBVSxlQUFWLEVBQTJCLGVBQTNCO1FBQ2hCLE1BQUEsQ0FBTyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBL0IsQ0FBb0MsQ0FBQyxJQUFyQyxDQUEwQyxVQUExQztRQUNBLE1BQUEsQ0FBTyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBL0IsQ0FBb0MsQ0FBQyxJQUFyQyxDQUEwQyxVQUExQztRQUNBLE1BQUEsQ0FBTyxTQUFTLENBQUMsS0FBakIsQ0FBdUIsQ0FBQyxJQUF4QixDQUE2QixlQUE3QjtlQUNBLE1BQUEsQ0FBTyxTQUFTLENBQUMsS0FBakIsQ0FBdUIsQ0FBQyxJQUF4QixDQUE2QixLQUE3QjtNQUxrQyxDQUFwQztNQU9BLEVBQUEsQ0FBRyw2QkFBSCxFQUFrQyxTQUFBO0FBQ2hDLFlBQUE7UUFBQSxTQUFBLEdBQWdCLElBQUEsU0FBQSxDQUFVLG9CQUFWLEVBQWdDLGVBQWhDO1FBQ2hCLE1BQUEsQ0FBTyxTQUFTLENBQUMsS0FBakIsQ0FBdUIsQ0FBQyxJQUF4QixDQUE2QixJQUE3QjtRQUVBLFNBQUEsR0FBZ0IsSUFBQSxTQUFBLENBQVUsZUFBVixFQUEyQixVQUEzQjtRQUNoQixNQUFBLENBQU8sU0FBUyxDQUFDLEtBQWpCLENBQXVCLENBQUMsSUFBeEIsQ0FBNkIsSUFBN0I7UUFFQSxTQUFBLEdBQWdCLElBQUEsU0FBQSxDQUFVLGVBQVYsRUFBMkIsRUFBM0I7ZUFDaEIsTUFBQSxDQUFPLFNBQVMsQ0FBQyxLQUFqQixDQUF1QixDQUFDLElBQXhCLENBQTZCLElBQTdCO01BUmdDLENBQWxDO2FBVUEsRUFBQSxDQUFHLHFCQUFILEVBQTBCLFNBQUE7QUFDeEIsWUFBQTtRQUFBLFNBQUEsR0FBZ0IsSUFBQSxTQUFBLENBQUE7UUFDaEIsTUFBQSxDQUFPLFNBQVMsQ0FBQyxLQUFqQixDQUF1QixDQUFDLElBQXhCLENBQTZCLElBQTdCO1FBRUEsU0FBQSxHQUFnQixJQUFBLFNBQUEsQ0FBVSxFQUFWLEVBQWMsZUFBZDtlQUNoQixNQUFBLENBQU8sU0FBUyxDQUFDLEtBQWpCLENBQXVCLENBQUMsSUFBeEIsQ0FBNkIsSUFBN0I7TUFMd0IsQ0FBMUI7SUFsQndCLENBQTFCO0VBUHFCLENBQXZCO0FBSEEiLCJzb3VyY2VzQ29udGVudCI6WyJUb2RvUmVnZXggPSByZXF1aXJlICcuLi9saWIvdG9kby1yZWdleCdcblNob3dUb2RvID0gcmVxdWlyZSAnLi4vbGliL3Nob3ctdG9kbydcblxuZGVzY3JpYmUgJ1RvZG8gUmVnZXgnLCAtPlxuICBbZGVmYXVsdFJlZ2V4U3RyLCBkZWZhdWx0VG9kb0xpc3RdID0gW11cblxuICBiZWZvcmVFYWNoIC0+XG4gICAgZGVmYXVsdFJlZ2V4U3RyID0gU2hvd1RvZG8uY29uZmlnLmZpbmRVc2luZ1JlZ2V4LmRlZmF1bHRcbiAgICBkZWZhdWx0VG9kb0xpc3QgPSBTaG93VG9kby5jb25maWcuZmluZFRoZXNlVG9kb3MuZGVmYXVsdFxuXG4gIGRlc2NyaWJlICdjcmVhdGUgcmVnZXhwJywgLT5cbiAgICBpdCAnaW5jbHVkZXMgYSByZWd1bGFyIGV4cHJlc3Npb24nLCAtPlxuICAgICAgdG9kb1JlZ2V4ID0gbmV3IFRvZG9SZWdleChkZWZhdWx0UmVnZXhTdHIsIGRlZmF1bHRUb2RvTGlzdClcbiAgICAgIGV4cGVjdCh0eXBlb2YgdG9kb1JlZ2V4LnJlZ2V4cC50ZXN0KS50b0JlKCdmdW5jdGlvbicpXG4gICAgICBleHBlY3QodHlwZW9mIHRvZG9SZWdleC5yZWdleHAuZXhlYykudG9CZSgnZnVuY3Rpb24nKVxuICAgICAgZXhwZWN0KHRvZG9SZWdleC5yZWdleCkudG9CZShkZWZhdWx0UmVnZXhTdHIpXG4gICAgICBleHBlY3QodG9kb1JlZ2V4LmVycm9yKS50b0JlKGZhbHNlKVxuXG4gICAgaXQgJ3NldHMgZXJyb3Igb24gaW52YWxpZCBpbnB1dCcsIC0+XG4gICAgICB0b2RvUmVnZXggPSBuZXcgVG9kb1JlZ2V4KCdhcnN0YXN0VE9ETzouKyQpL2cnLCBkZWZhdWx0VG9kb0xpc3QpXG4gICAgICBleHBlY3QodG9kb1JlZ2V4LmVycm9yKS50b0JlKHRydWUpXG5cbiAgICAgIHRvZG9SZWdleCA9IG5ldyBUb2RvUmVnZXgoZGVmYXVsdFJlZ2V4U3RyLCAnYSBzdHJpbmcnKVxuICAgICAgZXhwZWN0KHRvZG9SZWdleC5lcnJvcikudG9CZSh0cnVlKVxuXG4gICAgICB0b2RvUmVnZXggPSBuZXcgVG9kb1JlZ2V4KGRlZmF1bHRSZWdleFN0ciwgW10pXG4gICAgICBleHBlY3QodG9kb1JlZ2V4LmVycm9yKS50b0JlKHRydWUpXG5cbiAgICBpdCAnaGFuZGxlcyBlbXB0eSBpbnB1dCcsIC0+XG4gICAgICB0b2RvUmVnZXggPSBuZXcgVG9kb1JlZ2V4KClcbiAgICAgIGV4cGVjdCh0b2RvUmVnZXguZXJyb3IpLnRvQmUodHJ1ZSlcblxuICAgICAgdG9kb1JlZ2V4ID0gbmV3IFRvZG9SZWdleCgnJywgZGVmYXVsdFRvZG9MaXN0KVxuICAgICAgZXhwZWN0KHRvZG9SZWdleC5lcnJvcikudG9CZSh0cnVlKVxuIl19
