(function() {
  var RestClientPersist, fs;

  fs = require('fs');

  RestClientPersist = require('../lib/rest-client-persist');

  -describe("RestClientPersist test", function() {
    beforeEach(function() {
      var PACKAGE_PATH;
      PACKAGE_PATH = atom.packages.resolvePackagePath('rest-client');
      this.testPath = PACKAGE_PATH + "test_path.json";
      return this.defaultRequest = {
        method: 'GET',
        url: 'http://example.com',
        payload: '',
        headers: {
          'User-Agent': 'atom-rest-client',
          'Content-Type': 'text/html'
        }
      };
    });
    afterEach(function() {
      return fs.unlinkSync(this.testPath);
    });
    return describe("Persist", function() {
      it("path is created", function() {
        var persist;
        persist = false;
        runs(function() {
          return persist = new RestClientPersist(this.testPath);
        });
        waitsFor(function() {
          return persist;
        });
        return runs(function() {
          var stats;
          stats = fs.statSync(this.testPath);
          return expect(stats.isFile()).toBe(true);
        });
      });
      it("requests are saved", function() {
        var persist;
        persist = new RestClientPersist(this.testPath);
        persist.save(this.defaultRequest);
        persist.save(this.defaultRequest);
        return expect(persist.get().length).toBe(2);
      });
      it("requests are stored", function() {
        var persist, requestsLoaded;
        persist = new RestClientPersist(this.testPath);
        requestsLoaded = 0;
        persist.clear();
        persist.save(this.defaultRequest);
        persist.save(this.defaultRequest);
        persist.load((function(_this) {
          return function(err, requests) {
            return requestsLoaded = JSON.parse(requests).length;
          };
        })(this));
        waitsFor(function() {
          return requestsLoaded > 0;
        });
        return runs(function() {
          return expect(requestsLoaded).toBe(2);
        });
      });
      it("requests list can be limited", function() {
        var persist, requestsLoaded;
        persist = new RestClientPersist(this.testPath);
        requestsLoaded = 0;
        persist.save(this.defaultRequest);
        persist.save(this.defaultRequest);
        expect(persist.get(1).length).toBe(1);
        return expect(persist.get(2).length).toBe(2);
      });
      return it("requests get removed", function() {
        var persist, requestsLoaded;
        persist = new RestClientPersist(this.testPath);
        requestsLoaded = 0;
        persist.clear();
        persist.save(this.defaultRequest);
        persist.remove(this.defaultRequest);
        return expect(persist.get().length).toBe(0);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZGRld2V5Ly5hdG9tL3BhY2thZ2VzL3Jlc3QtY2xpZW50L3NwZWMvcmVzdC1jbGllbnQtcGVyc2lzdC1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSOztFQUVMLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSw0QkFBUjs7RUFDcEIsQ0FDQSxRQUFBLENBQVMsd0JBQVQsRUFBbUMsU0FBQTtJQUNqQyxVQUFBLENBQVcsU0FBQTtBQUNULFVBQUE7TUFBQSxZQUFBLEdBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBZCxDQUFpQyxhQUFqQztNQUNmLElBQUMsQ0FBQSxRQUFELEdBQWUsWUFBRCxHQUFjO2FBQzVCLElBQUMsQ0FBQSxjQUFELEdBQWtCO1FBQ2hCLE1BQUEsRUFBUSxLQURRO1FBRWhCLEdBQUEsRUFBSyxvQkFGVztRQUdoQixPQUFBLEVBQVMsRUFITztRQUloQixPQUFBLEVBQVM7VUFDUixZQUFBLEVBQWMsa0JBRE47VUFFUixjQUFBLEVBQWdCLFdBRlI7U0FKTzs7SUFIVCxDQUFYO0lBYUEsU0FBQSxDQUFVLFNBQUE7YUFDUixFQUFFLENBQUMsVUFBSCxDQUFjLElBQUMsQ0FBQSxRQUFmO0lBRFEsQ0FBVjtXQUdBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7TUFDbEIsRUFBQSxDQUFHLGlCQUFILEVBQXNCLFNBQUE7QUFDcEIsWUFBQTtRQUFBLE9BQUEsR0FBVTtRQUVWLElBQUEsQ0FBSyxTQUFBO2lCQUNILE9BQUEsR0FBYyxJQUFBLGlCQUFBLENBQWtCLElBQUMsQ0FBQSxRQUFuQjtRQURYLENBQUw7UUFHQSxRQUFBLENBQVMsU0FBQTtpQkFDUDtRQURPLENBQVQ7ZUFHQSxJQUFBLENBQUssU0FBQTtBQUNILGNBQUE7VUFBQSxLQUFBLEdBQVEsRUFBRSxDQUFDLFFBQUgsQ0FBWSxJQUFDLENBQUEsUUFBYjtpQkFFUixNQUFBLENBQU8sS0FBSyxDQUFDLE1BQU4sQ0FBQSxDQUFQLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsSUFBNUI7UUFIRyxDQUFMO01BVG9CLENBQXRCO01BY0EsRUFBQSxDQUFHLG9CQUFILEVBQXlCLFNBQUE7QUFDdkIsWUFBQTtRQUFBLE9BQUEsR0FBYyxJQUFBLGlCQUFBLENBQWtCLElBQUMsQ0FBQSxRQUFuQjtRQUVkLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLGNBQWQ7UUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxjQUFkO2VBRUEsTUFBQSxDQUFPLE9BQU8sQ0FBQyxHQUFSLENBQUEsQ0FBYSxDQUFDLE1BQXJCLENBQTRCLENBQUMsSUFBN0IsQ0FBa0MsQ0FBbEM7TUFOdUIsQ0FBekI7TUFRQSxFQUFBLENBQUcscUJBQUgsRUFBMEIsU0FBQTtBQUN4QixZQUFBO1FBQUEsT0FBQSxHQUFjLElBQUEsaUJBQUEsQ0FBa0IsSUFBQyxDQUFBLFFBQW5CO1FBQ2QsY0FBQSxHQUFpQjtRQUVqQixPQUFPLENBQUMsS0FBUixDQUFBO1FBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFDLENBQUEsY0FBZDtRQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLGNBQWQ7UUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsR0FBRCxFQUFNLFFBQU47bUJBQ1gsY0FBQSxHQUFpQixJQUFJLENBQUMsS0FBTCxDQUFXLFFBQVgsQ0FBb0IsQ0FBQztVQUQzQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBYjtRQUVBLFFBQUEsQ0FBUyxTQUFBO2lCQUNQLGNBQUEsR0FBaUI7UUFEVixDQUFUO2VBR0EsSUFBQSxDQUFLLFNBQUE7aUJBQ0gsTUFBQSxDQUFPLGNBQVAsQ0FBc0IsQ0FBQyxJQUF2QixDQUE0QixDQUE1QjtRQURHLENBQUw7TUFad0IsQ0FBMUI7TUFlQSxFQUFBLENBQUcsOEJBQUgsRUFBbUMsU0FBQTtBQUNqQyxZQUFBO1FBQUEsT0FBQSxHQUFjLElBQUEsaUJBQUEsQ0FBa0IsSUFBQyxDQUFBLFFBQW5CO1FBQ2QsY0FBQSxHQUFpQjtRQUVqQixPQUFPLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxjQUFkO1FBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFDLENBQUEsY0FBZDtRQUVBLE1BQUEsQ0FBTyxPQUFPLENBQUMsR0FBUixDQUFZLENBQVosQ0FBYyxDQUFDLE1BQXRCLENBQTZCLENBQUMsSUFBOUIsQ0FBbUMsQ0FBbkM7ZUFDQSxNQUFBLENBQU8sT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFaLENBQWMsQ0FBQyxNQUF0QixDQUE2QixDQUFDLElBQTlCLENBQW1DLENBQW5DO01BUmlDLENBQW5DO2FBVUEsRUFBQSxDQUFHLHNCQUFILEVBQTJCLFNBQUE7QUFDekIsWUFBQTtRQUFBLE9BQUEsR0FBYyxJQUFBLGlCQUFBLENBQWtCLElBQUMsQ0FBQSxRQUFuQjtRQUNkLGNBQUEsR0FBaUI7UUFFakIsT0FBTyxDQUFDLEtBQVIsQ0FBQTtRQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLGNBQWQ7UUFDQSxPQUFPLENBQUMsTUFBUixDQUFlLElBQUMsQ0FBQSxjQUFoQjtlQUVBLE1BQUEsQ0FBTyxPQUFPLENBQUMsR0FBUixDQUFBLENBQWEsQ0FBQyxNQUFyQixDQUE0QixDQUFDLElBQTdCLENBQWtDLENBQWxDO01BUnlCLENBQTNCO0lBaERrQixDQUFwQjtFQWpCaUMsQ0FBbkM7QUFKQSIsInNvdXJjZXNDb250ZW50IjpbImZzID0gcmVxdWlyZSAnZnMnXG5cblJlc3RDbGllbnRQZXJzaXN0ID0gcmVxdWlyZSAnLi4vbGliL3Jlc3QtY2xpZW50LXBlcnNpc3QnXG4tXG5kZXNjcmliZSBcIlJlc3RDbGllbnRQZXJzaXN0IHRlc3RcIiwgLT5cbiAgYmVmb3JlRWFjaCAtPlxuICAgIFBBQ0tBR0VfUEFUSCA9IGF0b20ucGFja2FnZXMucmVzb2x2ZVBhY2thZ2VQYXRoKCdyZXN0LWNsaWVudCcpXG4gICAgQHRlc3RQYXRoID0gXCIje1BBQ0tBR0VfUEFUSH10ZXN0X3BhdGguanNvblwiXG4gICAgQGRlZmF1bHRSZXF1ZXN0ID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybDogJ2h0dHA6Ly9leGFtcGxlLmNvbScsXG4gICAgICBwYXlsb2FkOiAnJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAnVXNlci1BZ2VudCc6ICdhdG9tLXJlc3QtY2xpZW50JyxcbiAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCdcbiAgICAgIH1cbiAgICB9XG5cbiAgYWZ0ZXJFYWNoIC0+XG4gICAgZnMudW5saW5rU3luYyhAdGVzdFBhdGgpXG5cbiAgZGVzY3JpYmUgXCJQZXJzaXN0XCIsIC0+XG4gICAgaXQgXCJwYXRoIGlzIGNyZWF0ZWRcIiwgLT5cbiAgICAgIHBlcnNpc3QgPSBmYWxzZVxuXG4gICAgICBydW5zIC0+XG4gICAgICAgIHBlcnNpc3QgPSBuZXcgUmVzdENsaWVudFBlcnNpc3QoQHRlc3RQYXRoKVxuXG4gICAgICB3YWl0c0ZvciAtPlxuICAgICAgICBwZXJzaXN0XG5cbiAgICAgIHJ1bnMgLT5cbiAgICAgICAgc3RhdHMgPSBmcy5zdGF0U3luYyhAdGVzdFBhdGgpXG5cbiAgICAgICAgZXhwZWN0KHN0YXRzLmlzRmlsZSgpKS50b0JlKHRydWUpXG5cbiAgICBpdCBcInJlcXVlc3RzIGFyZSBzYXZlZFwiLCAtPlxuICAgICAgcGVyc2lzdCA9IG5ldyBSZXN0Q2xpZW50UGVyc2lzdChAdGVzdFBhdGgpXG5cbiAgICAgIHBlcnNpc3Quc2F2ZShAZGVmYXVsdFJlcXVlc3QpXG4gICAgICBwZXJzaXN0LnNhdmUoQGRlZmF1bHRSZXF1ZXN0KVxuXG4gICAgICBleHBlY3QocGVyc2lzdC5nZXQoKS5sZW5ndGgpLnRvQmUoMilcblxuICAgIGl0IFwicmVxdWVzdHMgYXJlIHN0b3JlZFwiLCAtPlxuICAgICAgcGVyc2lzdCA9IG5ldyBSZXN0Q2xpZW50UGVyc2lzdChAdGVzdFBhdGgpXG4gICAgICByZXF1ZXN0c0xvYWRlZCA9IDBcblxuICAgICAgcGVyc2lzdC5jbGVhcigpXG4gICAgICBwZXJzaXN0LnNhdmUoQGRlZmF1bHRSZXF1ZXN0KVxuICAgICAgcGVyc2lzdC5zYXZlKEBkZWZhdWx0UmVxdWVzdClcbiAgICAgIHBlcnNpc3QubG9hZCAoZXJyLCByZXF1ZXN0cykgPT5cbiAgICAgICAgcmVxdWVzdHNMb2FkZWQgPSBKU09OLnBhcnNlKHJlcXVlc3RzKS5sZW5ndGhcbiAgICAgIHdhaXRzRm9yIC0+XG4gICAgICAgIHJlcXVlc3RzTG9hZGVkID4gMFxuXG4gICAgICBydW5zIC0+XG4gICAgICAgIGV4cGVjdChyZXF1ZXN0c0xvYWRlZCkudG9CZSgyKVxuXG4gICAgaXQgXCJyZXF1ZXN0cyBsaXN0IGNhbiBiZSBsaW1pdGVkXCIsIC0+XG4gICAgICBwZXJzaXN0ID0gbmV3IFJlc3RDbGllbnRQZXJzaXN0KEB0ZXN0UGF0aClcbiAgICAgIHJlcXVlc3RzTG9hZGVkID0gMFxuXG4gICAgICBwZXJzaXN0LnNhdmUoQGRlZmF1bHRSZXF1ZXN0KVxuICAgICAgcGVyc2lzdC5zYXZlKEBkZWZhdWx0UmVxdWVzdClcblxuICAgICAgZXhwZWN0KHBlcnNpc3QuZ2V0KDEpLmxlbmd0aCkudG9CZSgxKVxuICAgICAgZXhwZWN0KHBlcnNpc3QuZ2V0KDIpLmxlbmd0aCkudG9CZSgyKVxuXG4gICAgaXQgXCJyZXF1ZXN0cyBnZXQgcmVtb3ZlZFwiLCAtPlxuICAgICAgcGVyc2lzdCA9IG5ldyBSZXN0Q2xpZW50UGVyc2lzdChAdGVzdFBhdGgpXG4gICAgICByZXF1ZXN0c0xvYWRlZCA9IDBcblxuICAgICAgcGVyc2lzdC5jbGVhcigpXG4gICAgICBwZXJzaXN0LnNhdmUoQGRlZmF1bHRSZXF1ZXN0KVxuICAgICAgcGVyc2lzdC5yZW1vdmUoQGRlZmF1bHRSZXF1ZXN0KVxuXG4gICAgICBleHBlY3QocGVyc2lzdC5nZXQoKS5sZW5ndGgpLnRvQmUoMClcbiJdfQ==
