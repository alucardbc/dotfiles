(function() {
  var RestClientEditor, RestClientResponse;

  RestClientEditor = require('../lib/rest-client-editor');

  RestClientResponse = require('../lib/rest-client-response');

  describe('RestClientEditor', function() {
    var DEFAULT_FILENAME, DEFAULT_TEXT;
    DEFAULT_TEXT = 'body content';
    DEFAULT_FILENAME = 'GET - http://example.com';
    it('Process filename', function() {
      var editor;
      editor = new RestClientEditor(DEFAULT_TEXT, DEFAULT_FILENAME);
      return expect(editor.processFilename(DEFAULT_FILENAME)).toEqual('GET - example.com');
    });
    it('Process filename url with a path', function() {
      var editor, file_name;
      file_name = DEFAULT_FILENAME + '/path/';
      editor = new RestClientEditor(DEFAULT_TEXT, file_name);
      return expect(editor.processFilename(file_name)).toEqual('GET - example.compath');
    });
    it('Open file', function() {
      var editor;
      editor = new RestClientEditor(DEFAULT_TEXT, DEFAULT_FILENAME);
      return expect(editor.open()).toEqual(true);
    });
    it('Not open file, no body content', function() {
      var editor, text;
      text = "";
      editor = new RestClientEditor(text, DEFAULT_FILENAME);
      return expect(editor.open()).toEqual(false);
    });
    return it('Not open file, default body', function() {
      var editor, text;
      text = RestClientResponse.DEFAULT_RESULT;
      editor = new RestClientEditor(text, DEFAULT_FILENAME);
      return expect(editor.open()).toEqual(false);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZGRld2V5Ly5hdG9tL3BhY2thZ2VzL3Jlc3QtY2xpZW50L3NwZWMvcmVzdC1jbGllbnQtZWRpdG9yLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxnQkFBQSxHQUFtQixPQUFBLENBQVEsMkJBQVI7O0VBQ25CLGtCQUFBLEdBQXFCLE9BQUEsQ0FBUSw2QkFBUjs7RUFFckIsUUFBQSxDQUFTLGtCQUFULEVBQTZCLFNBQUE7QUFDM0IsUUFBQTtJQUFBLFlBQUEsR0FBZTtJQUNmLGdCQUFBLEdBQW1CO0lBRW5CLEVBQUEsQ0FBRyxrQkFBSCxFQUF1QixTQUFBO0FBQ3JCLFVBQUE7TUFBQSxNQUFBLEdBQWEsSUFBQSxnQkFBQSxDQUFpQixZQUFqQixFQUErQixnQkFBL0I7YUFFYixNQUFBLENBQU8sTUFBTSxDQUFDLGVBQVAsQ0FBdUIsZ0JBQXZCLENBQVAsQ0FBZ0QsQ0FBQyxPQUFqRCxDQUF5RCxtQkFBekQ7SUFIcUIsQ0FBdkI7SUFLQSxFQUFBLENBQUcsa0NBQUgsRUFBdUMsU0FBQTtBQUNyQyxVQUFBO01BQUEsU0FBQSxHQUFZLGdCQUFBLEdBQW1CO01BQy9CLE1BQUEsR0FBYSxJQUFBLGdCQUFBLENBQWlCLFlBQWpCLEVBQStCLFNBQS9CO2FBQ2IsTUFBQSxDQUFPLE1BQU0sQ0FBQyxlQUFQLENBQXVCLFNBQXZCLENBQVAsQ0FBeUMsQ0FBQyxPQUExQyxDQUFrRCx1QkFBbEQ7SUFIcUMsQ0FBdkM7SUFLQSxFQUFBLENBQUcsV0FBSCxFQUFnQixTQUFBO0FBQ2QsVUFBQTtNQUFBLE1BQUEsR0FBYSxJQUFBLGdCQUFBLENBQWlCLFlBQWpCLEVBQStCLGdCQUEvQjthQUNiLE1BQUEsQ0FBTyxNQUFNLENBQUMsSUFBUCxDQUFBLENBQVAsQ0FBcUIsQ0FBQyxPQUF0QixDQUE4QixJQUE5QjtJQUZjLENBQWhCO0lBSUEsRUFBQSxDQUFHLGdDQUFILEVBQXFDLFNBQUE7QUFDbkMsVUFBQTtNQUFBLElBQUEsR0FBTztNQUNQLE1BQUEsR0FBYSxJQUFBLGdCQUFBLENBQWlCLElBQWpCLEVBQXVCLGdCQUF2QjthQUViLE1BQUEsQ0FBTyxNQUFNLENBQUMsSUFBUCxDQUFBLENBQVAsQ0FBcUIsQ0FBQyxPQUF0QixDQUE4QixLQUE5QjtJQUptQyxDQUFyQztXQU1BLEVBQUEsQ0FBRyw2QkFBSCxFQUFrQyxTQUFBO0FBQ2hDLFVBQUE7TUFBQSxJQUFBLEdBQU8sa0JBQWtCLENBQUM7TUFDMUIsTUFBQSxHQUFhLElBQUEsZ0JBQUEsQ0FBaUIsSUFBakIsRUFBdUIsZ0JBQXZCO2FBRWIsTUFBQSxDQUFPLE1BQU0sQ0FBQyxJQUFQLENBQUEsQ0FBUCxDQUFxQixDQUFDLE9BQXRCLENBQThCLEtBQTlCO0lBSmdDLENBQWxDO0VBeEIyQixDQUE3QjtBQUhBIiwic291cmNlc0NvbnRlbnQiOlsiUmVzdENsaWVudEVkaXRvciA9IHJlcXVpcmUgJy4uL2xpYi9yZXN0LWNsaWVudC1lZGl0b3InXG5SZXN0Q2xpZW50UmVzcG9uc2UgPSByZXF1aXJlICcuLi9saWIvcmVzdC1jbGllbnQtcmVzcG9uc2UnXG5cbmRlc2NyaWJlICdSZXN0Q2xpZW50RWRpdG9yJywgLT5cbiAgREVGQVVMVF9URVhUID0gJ2JvZHkgY29udGVudCdcbiAgREVGQVVMVF9GSUxFTkFNRSA9ICdHRVQgLSBodHRwOi8vZXhhbXBsZS5jb20nXG5cbiAgaXQgJ1Byb2Nlc3MgZmlsZW5hbWUnLCAtPlxuICAgIGVkaXRvciA9IG5ldyBSZXN0Q2xpZW50RWRpdG9yKERFRkFVTFRfVEVYVCwgREVGQVVMVF9GSUxFTkFNRSlcblxuICAgIGV4cGVjdChlZGl0b3IucHJvY2Vzc0ZpbGVuYW1lKERFRkFVTFRfRklMRU5BTUUpKS50b0VxdWFsKCdHRVQgLSBleGFtcGxlLmNvbScpXG5cbiAgaXQgJ1Byb2Nlc3MgZmlsZW5hbWUgdXJsIHdpdGggYSBwYXRoJywgLT5cbiAgICBmaWxlX25hbWUgPSBERUZBVUxUX0ZJTEVOQU1FICsgJy9wYXRoLydcbiAgICBlZGl0b3IgPSBuZXcgUmVzdENsaWVudEVkaXRvcihERUZBVUxUX1RFWFQsIGZpbGVfbmFtZSlcbiAgICBleHBlY3QoZWRpdG9yLnByb2Nlc3NGaWxlbmFtZShmaWxlX25hbWUpKS50b0VxdWFsKCdHRVQgLSBleGFtcGxlLmNvbXBhdGgnKVxuXG4gIGl0ICdPcGVuIGZpbGUnLCAtPlxuICAgIGVkaXRvciA9IG5ldyBSZXN0Q2xpZW50RWRpdG9yKERFRkFVTFRfVEVYVCwgREVGQVVMVF9GSUxFTkFNRSlcbiAgICBleHBlY3QoZWRpdG9yLm9wZW4oKSkudG9FcXVhbCh0cnVlKVxuXG4gIGl0ICdOb3Qgb3BlbiBmaWxlLCBubyBib2R5IGNvbnRlbnQnLCAtPlxuICAgIHRleHQgPSBcIlwiXG4gICAgZWRpdG9yID0gbmV3IFJlc3RDbGllbnRFZGl0b3IodGV4dCwgREVGQVVMVF9GSUxFTkFNRSlcblxuICAgIGV4cGVjdChlZGl0b3Iub3BlbigpKS50b0VxdWFsKGZhbHNlKVxuXG4gIGl0ICdOb3Qgb3BlbiBmaWxlLCBkZWZhdWx0IGJvZHknLCAtPlxuICAgIHRleHQgPSBSZXN0Q2xpZW50UmVzcG9uc2UuREVGQVVMVF9SRVNVTFRcbiAgICBlZGl0b3IgPSBuZXcgUmVzdENsaWVudEVkaXRvcih0ZXh0LCBERUZBVUxUX0ZJTEVOQU1FKVxuXG4gICAgZXhwZWN0KGVkaXRvci5vcGVuKCkpLnRvRXF1YWwoZmFsc2UpXG4iXX0=
