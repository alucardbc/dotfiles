function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _libMain = require('../lib/main');

var _libMain2 = _interopRequireDefault(_libMain);

'use babel';

var bitwisePath = path.join(__dirname, 'fixtures', 'bitwise', 'bitwise.js');
var syntaxPath = path.join(__dirname, 'fixtures', 'syntax', 'badSyntax.js');
var emptyPath = path.join(__dirname, 'fixtures', 'empty.js');
var goodPath = path.join(__dirname, 'fixtures', 'good.js');

describe('The JSHint provider for Linter', function () {
  var lint = _libMain2['default'].provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return atom.packages.activatePackage('linter-jshint');
    });
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript');
    });
    waitsForPromise(function () {
      return atom.workspace.open(bitwisePath);
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-jshint')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-jshint')).toBe(true);
  });

  describe('shows errors in a file with issues', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(bitwisePath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('verifies the first message', function () {
      var message = "W016 - Unexpected use of '&'.";
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Warning');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBe(message);
          expect(messages[0].filePath).toBe(bitwisePath);
          expect(messages[0].range).toEqual([[0, 10], [0, 13]]);
        });
      });
    });
  });

  it('finds nothing wrong with an empty file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(emptyPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toBe(0);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toBe(0);
        });
      });
    });
  });

  describe('shows syntax errors', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(syntaxPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('verifies the first message', function () {
      var message = 'E006 - Unexpected early end of program.';
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Error');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBe(message);
          expect(messages[0].filePath).toBe(syntaxPath);
          expect(messages[0].range).toEqual([[0, 10], [0, 11]]);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,