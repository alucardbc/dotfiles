function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var fixturePath = path.join(__dirname, 'fixtures');
var goodPath = path.join(fixturePath, 'good.py');
var badPath = path.join(fixturePath, 'bad.py');
var errwarnPath = path.join(fixturePath, 'errwarn.py');

describe('The flake8 provider for Linter', function () {
  var lint = require('../lib/main.js').provideLinter().lint;

  beforeEach(function () {
    // Info about this beforeEach() implementation:
    // https://github.com/AtomLinter/Meta/issues/15
    var activationPromise = atom.packages.activatePackage('linter-flake8');

    waitsForPromise(function () {
      return atom.packages.activatePackage('language-python').then(function () {
        return atom.workspace.open(goodPath);
      });
    });

    atom.packages.triggerDeferredActivationHooks();
    waitsForPromise(function () {
      return activationPromise;
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-flake8')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-flake8')).toBe(true);
  });

  describe('checks bad.py and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Warning');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBe('F821 â€” undefined name \'asfd\'');
          expect(messages[0].filePath).toBe(badPath);
          expect(messages[0].range).toEqual([[0, 0], [0, 4]]);
        });
      });
    });

    it('checks that the message is an error if flakeErrors is set', function () {
      atom.config.set('linter-flake8.flakeErrors', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Error');
        });
      });
    });
  });

  describe('checks errwarn.py and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(errwarnPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('finds the message is a warning if pycodestyleErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Warning');
        });
      });
    });

    it("finds the message is an error if pycodestyleErrorsToWarnings isn't set", function () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', false);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Error');
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBe(0);
        });
      });
    });
  });

  describe('executable path', function () {
    var helpers = require('atom-linter');

    var editor = null;
    var realExec = helpers.exec;
    var execParams = [];
    function fakeExec() {
      for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
        parameters[_key] = arguments[_key];
      }

      execParams.push(parameters);
      return Promise.resolve('');
    }

    beforeEach(function () {
      atom.project.addPath(fixturePath);

      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: fakeExec
      });

      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    afterEach(function () {
      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: realExec
      });
    });

    it('finds executable relative to project', function () {
      atom.config.set('linter-flake8.executablePath', path.join('$PROJECT', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds executable relative to projects', function () {
      var paths = [path.join('$project', 'null'), path.join('$pRoJeCt', 'flake1'), path.join('$PrOjEcT', 'flake2'), path.join('$PROJECT', 'flake8')].join(';');
      atom.config.set('linter-flake8.executablePath', paths);
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds executable using project name', function () {
      atom.config.set('linter-flake8.executablePath', path.join('$PROJECT_NAME', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join('fixtures', 'flake8'));
        });
      });
    });

    it('finds executable using project names', function () {
      var paths = [path.join('$project_name', 'null'), path.join('$pRoJeCt_NaMe', 'flake1'), path.join('$PrOjEcT_nAmE', 'flake2'), path.join('$PROJECT_NAME', 'flake8')].join(';');
      var correct = [path.join('fixtures', 'null'), path.join('fixtures', 'flake1'), path.join('fixtures', 'flake2'), path.join('fixtures', 'flake8')].join(';');
      atom.config.set('linter-flake8.executablePath', paths);
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(correct);
        });
      });
    });

    it('normalizes executable path', function () {
      atom.config.set('linter-flake8.executablePath', path.join(fixturePath, '..', 'fixtures', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds backup executable', function () {
      var flakeNotFound = path.join('$PROJECT', 'flake8_notfound');
      var flakeBackup = path.join(fixturePath, 'flake8_backup');
      atom.config.set('linter-flake8.executablePath', flakeNotFound + ';' + flakeBackup);
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8_backup'));
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,