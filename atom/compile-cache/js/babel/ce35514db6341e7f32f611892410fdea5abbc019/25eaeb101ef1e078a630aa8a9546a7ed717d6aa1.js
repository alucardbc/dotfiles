'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = {
  config: {
    puppetExecutablePath: {
      title: 'Puppet Executable Path',
      type: 'string',
      description: 'Path to Puppet executable (e.g. /opt/puppetlabs/bin/puppet) if not in shell env path.',
      'default': 'puppet'
    },
    puppetParserArgs: {
      title: 'Puppet Parser Arguments',
      type: 'array',
      description: 'Arguments (e.g. --parser=future --parser=foobar) to pass to parser.',
      'default': [],
      items: {
        type: 'string'
      }
    }
  },

  activate: function activate() {
    require('atom-package-deps').install('linter-puppet-parsing');
  },

  provideLinter: function provideLinter() {
    return {
      name: 'Puppet',
      grammarScopes: ['source.puppet'],
      scope: 'file',
      lintOnFly: false,
      lint: function lint(activeEditor) {
        var helpers = require('atom-linter');
        var regex = /^.*(Error|Warning).*:\s(.*)\sat.*\.pp:(\d+):?(\d+)?.*$/;
        var file = activeEditor.getPath();

        var args = ['parser'];
        if (atom.config.get('linter-puppet-parsing.puppetParserArgs')[0] !== '') {
          args = args.concat(atom.config.get('linter-puppet-parsing.puppetParserArgs'));
        }
        args = args.concat(['validate', file]);

        return helpers.exec(atom.config.get('linter-puppet-parsing.puppetExecutablePath'), args, { stream: 'stderr', allowEmptyStderr: true }).then(function (output) {
          var toReturn = [];
          output.split(/\r?\n/).forEach(function (line) {
            var matches = regex.exec(line);
            var matches_two = /Syntax error at end of file/.exec(line);
            if (matches != null) {
              toReturn.push({
                type: matches[1],
                severity: matches[1].toLowerCase(),
                text: matches[2],
                range: matches[4] != '' ? [[Number.parseInt(matches[3]) - 1, Number.parseInt(matches[4]) - 1], [Number.parseInt(matches[3]) - 1, Number.parseInt(matches[4])]] : helpers.rangeFromLineNumber(activeEditor, Number.parseInt(matches[3] - 1)),
                filePath: file
              });
            } else if (matches_two != null) {
              toReturn.push({
                type: 'Error',
                severity: 'error',
                text: 'Syntax error at end of file',
                range: 1,
                filePath: file
              });
            }
          });
          return toReturn;
        });
      }
    };
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2RkZXdleS8uYXRvbS9wYWNrYWdlcy9saW50ZXItcHVwcGV0LXBhcnNpbmcvbGliL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7OztxQkFFRztBQUNiLFFBQU0sRUFBRTtBQUNOLHdCQUFvQixFQUFFO0FBQ3BCLFdBQUssRUFBRSx3QkFBd0I7QUFDL0IsVUFBSSxFQUFFLFFBQVE7QUFDZCxpQkFBVyxFQUFFLHVGQUF1RjtBQUNwRyxpQkFBUyxRQUFRO0tBQ2xCO0FBQ0Qsb0JBQWdCLEVBQUU7QUFDaEIsV0FBSyxFQUFFLHlCQUF5QjtBQUNoQyxVQUFJLEVBQUUsT0FBTztBQUNiLGlCQUFXLEVBQUUscUVBQXFFO0FBQ2xGLGlCQUFTLEVBQUU7QUFDWCxXQUFLLEVBQUU7QUFDTCxZQUFJLEVBQUUsUUFBUTtPQUNmO0tBQ0Y7R0FDRjs7QUFFRCxVQUFRLEVBQUUsb0JBQU07QUFDZCxXQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztHQUMvRDs7QUFFRCxlQUFhLEVBQUUseUJBQU07QUFDbkIsV0FBTztBQUNMLFVBQUksRUFBRSxRQUFRO0FBQ2QsbUJBQWEsRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUNoQyxXQUFLLEVBQUUsTUFBTTtBQUNiLGVBQVMsRUFBRSxLQUFLO0FBQ2hCLFVBQUksRUFBRSxjQUFDLFlBQVksRUFBSztBQUN0QixZQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsWUFBTSxLQUFLLEdBQUcsd0RBQXdELENBQUM7QUFDdkUsWUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDOztBQUVwQyxZQUFJLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3JCLFlBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7QUFDdkUsY0FBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQyxDQUFDO1NBQy9FO0FBQ0QsWUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFdkMsZUFBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUNsSixjQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbEIsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQzVDLGdCQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLGdCQUFNLFdBQVcsR0FBRyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0QsZ0JBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUNuQixzQkFBUSxDQUFDLElBQUksQ0FBQztBQUNaLG9CQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNoQix3QkFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7QUFDbEMsb0JBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLHFCQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUM7QUFDN08sd0JBQVEsRUFBRSxJQUFJO2VBQ2YsQ0FBQyxDQUFDO2FBQ0osTUFDSSxJQUFJLFdBQVcsSUFBSSxJQUFJLEVBQUU7QUFDNUIsc0JBQVEsQ0FBQyxJQUFJLENBQUM7QUFDWixvQkFBSSxFQUFFLE9BQU87QUFDYix3QkFBUSxFQUFFLE9BQU87QUFDakIsb0JBQUksRUFBRSw2QkFBNkI7QUFDbkMscUJBQUssRUFBRSxDQUFDO0FBQ1Isd0JBQVEsRUFBRSxJQUFJO2VBQ2YsQ0FBQyxDQUFDO2FBQ0o7V0FDRixDQUFDLENBQUM7QUFDSCxpQkFBTyxRQUFRLENBQUM7U0FDakIsQ0FBQyxDQUFDO09BQ0o7S0FDRixDQUFDO0dBQ0g7Q0FDRiIsImZpbGUiOiIvaG9tZS9kZGV3ZXkvLmF0b20vcGFja2FnZXMvbGludGVyLXB1cHBldC1wYXJzaW5nL2xpYi9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29uZmlnOiB7XG4gICAgcHVwcGV0RXhlY3V0YWJsZVBhdGg6IHtcbiAgICAgIHRpdGxlOiAnUHVwcGV0IEV4ZWN1dGFibGUgUGF0aCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aCB0byBQdXBwZXQgZXhlY3V0YWJsZSAoZS5nLiAvb3B0L3B1cHBldGxhYnMvYmluL3B1cHBldCkgaWYgbm90IGluIHNoZWxsIGVudiBwYXRoLicsXG4gICAgICBkZWZhdWx0OiAncHVwcGV0JyxcbiAgICB9LFxuICAgIHB1cHBldFBhcnNlckFyZ3M6IHtcbiAgICAgIHRpdGxlOiAnUHVwcGV0IFBhcnNlciBBcmd1bWVudHMnLFxuICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQXJndW1lbnRzIChlLmcuIC0tcGFyc2VyPWZ1dHVyZSAtLXBhcnNlcj1mb29iYXIpIHRvIHBhc3MgdG8gcGFyc2VyLicsXG4gICAgICBkZWZhdWx0OiBbXSxcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjdGl2YXRlOiAoKSA9PiB7XG4gICAgcmVxdWlyZSgnYXRvbS1wYWNrYWdlLWRlcHMnKS5pbnN0YWxsKCdsaW50ZXItcHVwcGV0LXBhcnNpbmcnKTtcbiAgfSxcblxuICBwcm92aWRlTGludGVyOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdQdXBwZXQnLFxuICAgICAgZ3JhbW1hclNjb3BlczogWydzb3VyY2UucHVwcGV0J10sXG4gICAgICBzY29wZTogJ2ZpbGUnLFxuICAgICAgbGludE9uRmx5OiBmYWxzZSxcbiAgICAgIGxpbnQ6IChhY3RpdmVFZGl0b3IpID0+IHtcbiAgICAgICAgY29uc3QgaGVscGVycyA9IHJlcXVpcmUoJ2F0b20tbGludGVyJyk7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL14uKihFcnJvcnxXYXJuaW5nKS4qOlxccyguKilcXHNhdC4qXFwucHA6KFxcZCspOj8oXFxkKyk/LiokLztcbiAgICAgICAgY29uc3QgZmlsZSA9IGFjdGl2ZUVkaXRvci5nZXRQYXRoKCk7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBbJ3BhcnNlciddXG4gICAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlci1wdXBwZXQtcGFyc2luZy5wdXBwZXRQYXJzZXJBcmdzJylbMF0gIT09ICcnKSB7XG4gICAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KGF0b20uY29uZmlnLmdldCgnbGludGVyLXB1cHBldC1wYXJzaW5nLnB1cHBldFBhcnNlckFyZ3MnKSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFsndmFsaWRhdGUnLCBmaWxlXSk7XG5cbiAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXhlYyhhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlci1wdXBwZXQtcGFyc2luZy5wdXBwZXRFeGVjdXRhYmxlUGF0aCcpLCBhcmdzLCB7c3RyZWFtOiAnc3RkZXJyJywgYWxsb3dFbXB0eVN0ZGVycjogdHJ1ZX0pLnRoZW4ob3V0cHV0ID0+IHtcbiAgICAgICAgICB2YXIgdG9SZXR1cm4gPSBbXTtcbiAgICAgICAgICBvdXRwdXQuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gcmVnZXguZXhlYyhsaW5lKTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNfdHdvID0gL1N5bnRheCBlcnJvciBhdCBlbmQgb2YgZmlsZS8uZXhlYyhsaW5lKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdG9SZXR1cm4ucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogbWF0Y2hlc1sxXSxcbiAgICAgICAgICAgICAgICBzZXZlcml0eTogbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHRleHQ6IG1hdGNoZXNbMl0sXG4gICAgICAgICAgICAgICAgcmFuZ2U6IG1hdGNoZXNbNF0gIT0gJycgPyBbW051bWJlci5wYXJzZUludChtYXRjaGVzWzNdKSAtIDEsIE51bWJlci5wYXJzZUludChtYXRjaGVzWzRdKSAtIDFdLCBbTnVtYmVyLnBhcnNlSW50KG1hdGNoZXNbM10pIC0gMSwgTnVtYmVyLnBhcnNlSW50KG1hdGNoZXNbNF0pXV0gOiBoZWxwZXJzLnJhbmdlRnJvbUxpbmVOdW1iZXIoYWN0aXZlRWRpdG9yLCBOdW1iZXIucGFyc2VJbnQoKG1hdGNoZXNbM10gLSAxKSkpLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoZXNfdHdvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdG9SZXR1cm4ucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICBzZXZlcml0eTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnU3ludGF4IGVycm9yIGF0IGVuZCBvZiBmaWxlJyxcbiAgICAgICAgICAgICAgICByYW5nZTogMSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogZmlsZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuIl19